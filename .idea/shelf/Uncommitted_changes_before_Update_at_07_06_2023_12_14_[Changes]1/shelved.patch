Index: unittests/renderer/ShadowTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package renderer;\r\n\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport static java.awt.Color.*;\r\n\r\nimport geometries.*;\r\nimport lighting.*;\r\nimport primitives.*;\r\nimport renderer.*;\r\nimport scene.Scene;\r\n\r\n/** Testing basic shadows\r\n * @author Dan */\r\npublic class ShadowTests {\r\n   private Intersectable sphere     = new Sphere(60d,new Point(0, 0, -200))                                         //\r\n      .setEmission(new Color(BLUE))                                                                                  //\r\n      .setMaterial(new Material().setKd(0.5).setKs(0.5).setShininess(30));\r\n   private Material      trMaterial = new Material().setKd(0.5).setKs(0.5).setShininess(30);\r\n\r\n   private Scene         scene      = new Scene(\"Test scene\");\r\n   private Camera        camera     = new Camera(new Point(0, 0, 1000), new Vector(0, 0, -1), new Vector(0, 1, 0))   //\r\n      .setVPSize(200, 200).setVpDistance(1000)                                                                       //\r\n      .setRayTracer(new RayTracerBasic(scene));\r\n\r\n   /** Helper function for the tests in this module */\r\n   void sphereTriangleHelper(String pictName, Triangle triangle, Point spotLocation) {\r\n      scene.geometries.add(sphere, triangle.setEmission(new Color(BLUE)).setMaterial(trMaterial));\r\n      scene.lights.add( //\r\n                       new SpotLight(new Color(400, 240, 0), spotLocation, new Vector(1, 1, -3)) //\r\n                          .setKl(1E-5).setKq(1.5E-7));\r\n      camera.setImageWriter(new ImageWriter(pictName, 400, 400)) //\r\n         .renderImage() //\r\n         .writeToImage();\r\n   }\r\n\r\n   /** Produce a picture of a sphere and triangle with point light and shade */\r\n   @Test\r\n   public void sphereTriangleInitial() {\r\n      sphereTriangleHelper(\"shadowSphereTriangleInitial\", //\r\n                           new Triangle(new Point(-70, -40, 0), new Point(-40, -70, 0), new Point(-68, -68, -4)), //\r\n                           new Point(-100, -100, 200));\r\n   }\r\n\r\n\r\n   /**\r\n    * Sphere-Triangle shading - move triangle up-right\r\n    */\r\n   @Test\r\n   public void sphereTriangleMove1() {\r\n      sphereTriangleHelper(\"shadowSphereTriangleMove2\", //\r\n              new Triangle(new Point(-60, -30, 0), new Point(-30, -60, 0), new Point(-60, -60, -5)), //\r\n              new Point(-100, -100, 200));\r\n   }\r\n\r\n   /**\r\n    * Sphere-Triangle shading - move triangle upper-righter\r\n    */\r\n   @Test\r\n   public void sphereTriangleMove2() {\r\n      sphereTriangleHelper(\"shadowSphereTriangleMove1\", //\r\n              new Triangle(new Point(-50, -15, 0), new Point(-15, -50, 0), new Point(-45, -45, -5)), //\r\n              new Point(-100, -100, 200));\r\n   }\r\n   @Test\r\n   public void sphereTriangleSpot1() {\r\n      sphereTriangleHelper(\"shadowSphereTriangleSpot1\", //\r\n              new Triangle(new Point(-70, -40, 0), new Point(-40, -70, 0), new Point(-68, -68, -4)), //\r\n              new Point(-80, -80, 100));\r\n   }\r\n\r\n   /**\r\n    * Sphere-Triangle shading - move spot even more close\r\n    */\r\n   @Test\r\n   public void sphereTriangleSpot2() {\r\n      sphereTriangleHelper(\"shadowSphereTriangleSpot2\", //\r\n              new Triangle(new Point(-70, -40, 0), new Point(-40, -70, 0), new Point(-68, -68, -4)), //\r\n              new Point(-100, -100, 90));\r\n   }\r\n\r\n\r\n\r\n   /** Produce a picture of a two triangles lighted by a spot light with a Sphere\r\n    * producing a shading */\r\n   @Test\r\n   public void trianglesSphere() {\r\n      scene.setAmbientLight(new AmbientLight(new Color(WHITE), new Double3(0.15)));\r\n\r\n      scene.geometries.add( //\r\n                           new Triangle(new Point(-150, -150, -115), new Point(150, -150, -135),\r\n                                        new Point(75, 75, -150)) //\r\n                              .setMaterial(new Material().setKs(0.8).setShininess(60)), //\r\n                           new Triangle(new Point(-150, -150, -115), new Point(-70, 70, -140), new Point(75, 75, -150)) //\r\n                              .setMaterial(new Material().setKs(0.8).setShininess(60)), //\r\n                           new Sphere(30d,new Point(0, 0, -11)) //\r\n                              .setEmission(new Color(BLUE)) //\r\n                              .setMaterial(new Material().setKd(0.5).setKs(0.5).setShininess(30)) //\r\n      );\r\n      scene.lights.add( //\r\n                       new SpotLight(new Color(700, 400, 400), new Point(40, 40, 115), new Vector(-1, -1, -4)) //\r\n                          .setKl(4E-4).setKq(2E-5));\r\n\r\n      camera.setImageWriter(new ImageWriter(\"shadowTrianglesSphere\", 600, 600)) //\r\n         .renderImage() //\r\n         .writeToImage();\r\n   }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/unittests/renderer/ShadowTests.java b/unittests/renderer/ShadowTests.java
--- a/unittests/renderer/ShadowTests.java	
+++ b/unittests/renderer/ShadowTests.java	
@@ -38,7 +38,11 @@
    @Test
    public void sphereTriangleInitial() {
       sphereTriangleHelper("shadowSphereTriangleInitial", //
-                           new Triangle(new Point(-70, -40, 0), new Point(-40, -70, 0), new Point(-68, -68, -4)), //
+                           new Triangle(
+                                   new Point(-70, -40, 0),
+                                   new Point(-40, -70, 0),
+                                   new Point(-68, -68, -4)
+                           ), //
                            new Point(-100, -100, 200));
    }
 
@@ -49,7 +53,11 @@
    @Test
    public void sphereTriangleMove1() {
       sphereTriangleHelper("shadowSphereTriangleMove2", //
-              new Triangle(new Point(-60, -30, 0), new Point(-30, -60, 0), new Point(-60, -60, -5)), //
+              new Triangle(
+                      new Point(-60, -30, 0),
+                      new Point(-30, -60, 0),
+                      new Point(-60, -60, -5)
+              ), //
               new Point(-100, -100, 200));
    }
 
@@ -81,7 +89,7 @@
 
 
 
-   /** Produce a picture of a two triangles lighted by a spot light with a Sphere
+   /** Produce a picture of two triangles lighted by a spot light with a Sphere
     * producing a shading */
    @Test
    public void trianglesSphere() {
@@ -106,4 +114,111 @@
          .writeToImage();
    }
 
+   /** Produce a picture of ten shapes lighted by many variations of light sources
+    * producing a shading */
+   /*@Test
+   public void raceCar(){
+      // TODO: implement test
+      Point a=new Point(0,0.5,0.2);
+      Point b=new Point(0,-0.5,0.2);
+      Point c=new Point(3,0.5,1);
+      Point d=new Point(3,-0.5,1);
+      Point a2=new Point(0,0.5,-0.2);
+      Point b2=new Point(0,-0.5,-0.2);
+      Point c2=new Point(3,0.5,-1);
+      Point d2=new Point(3,-0.5,-1);
+      Point e=new Point(3,1.5,1);
+      Point e2=new Point(3,1.5,-1);
+      Point f=new Point(3,-1.5,1);
+      Point f2=new Point(3,-1.5,-1);
+      Point g1=new Point(3,1.5,0.2);
+      Point g2=new Point(3,-1.5,0.2);
+      Point g3=new Point(3,1.5,-0.2);
+      Point g4=new Point(3,-1.5,-0.2);
+      Point h1=new Point(6,1.5,1);
+      Point h2=new Point(6,-1.5,1);
+      Point h3=new Point(6,1.5,-1);
+      Point h4=new Point(6,-1.5,-1);
+
+
+      //סגול אטום
+      Polygon frontRectangle1= new Polygon(a, b, c, d);
+      Polygon frontRectangle2= new Polygon(a2, b2, c2, d2);
+      Triangle front1= new Triangle(a,c,e);
+      Triangle front2= new Triangle(a2,c2,e2);
+      Triangle front3= new Triangle(b,d,f);
+      Triangle front4= new Triangle(b2,d2,f2);
+      Triangle frontSide1= new Triangle(a,g1,e);
+      Triangle frontSide2= new Triangle(b,g2,e2);
+      Triangle frontSide3= new Triangle(a2,g3,f);
+      Triangle frontSide4= new Triangle(b2,g4,f2);
+      Polygon frontSRectangle1= new Polygon(a, g1, g3, a2);
+      Polygon frontSRectangle2= new Polygon(b, g2, g4, b2);
+      Polygon behinde1= new Polygon(e, h1, h3, e2);
+      Polygon behinde2= new Polygon(e2, h3, h4, f2);
+      Polygon behinde3= new Polygon(f2, h4, h2, f);
+      Polygon behinde4= new Polygon(f, h2, h1, e);
+      Polygon behind =new Polygon(h3, h2, h1, h4);
+
+   }*/
+
+
+   public void buildCar() {
+      // Car Body (Polygon)
+      Polygon carBody = new Polygon(
+              new Point(0, 0, 0),
+              new Point(0, 2, 0),
+              new Point(2, 2, 0),
+              new Point(3, 1, 0),
+              new Point(3, 0, 0)
+      );
+
+      // Car Roof (Polygon)
+      Polygon carRoof = new Polygon(
+              new Point(0, 2, 0),
+              new Point(0, 2, 1),
+              new Point(2, 2, 1),
+              new Point(2, 2, 0)
+      );
+
+      // Car Front Windshield (Triangle)
+      Triangle carWindshield = new Triangle(
+              new Point(2, 2, 0),
+              new Point(2, 2, 1),
+              new Point(3, 1, 0)
+      );
+
+      // Car Rear Windshield (Triangle)
+      Triangle carRearWindshield = new Triangle(
+              new Point(0, 0, 0),
+              new Point(0, 0, 1),
+              new Point(3, 0, 0)
+      );
+
+      // Car Front Wheel (Sphere)
+      Sphere carFrontWheel = new Sphere(0.5, new Point(1, 0, 0));
+
+      // Car Rear Wheel (Sphere)
+      Sphere carRearWheel = new Sphere(0.5, new Point(1, 2, 0));
+
+      // Car Axle (Cylinder)
+      Cylinder carAxle = new Cylinder(0.1,new Point(1, 0, -0.5), new Point(1, 2, -0.5));
+
+      // Add the car components to the scene
+      scene.geometries.add(
+              carBody, carRoof, carWindshield, carRearWindshield, carFrontWheel, carRearWheel, carAxle
+      );
+
+      // Set up lights and camera
+      scene.lights.add(
+              new SpotLight(new Color(700, 400, 400), new Point(40, 40, 115), new Vector(-1, -1, -4))
+                      .setKl(4E-4).setKq(2E-5)
+      );
+      camera.setImageWriter(new ImageWriter("carImage", 600, 600));
+
+      // Render the image
+      Render render = new Render(scene, camera);
+      render.renderImage();
+      render.writeToImage();
+   }
 }
